 function ex1sol
  format long
  disp('Problem 1ab')
  A=[1 -1 -1;3 2 0;0 2 -8];
  b=[0;10;0.6];
  x_1=mysolve1(A,b)   % medium advanced 
  x_2=mysolve2(A,b)   % simpler
  x_3=mysolvePiv(A,b) % most advanced
  x_backslash=A\b     % Matlab's own solver
  disp('Problem 1c')
  A=rand(10);
  b=rand(10,1);
  x_1=mysolve1(A,b)
  x_2=mysolve2(A,b)  
  x_3=mysolvePiv(A,b)
  x_backslash=A\b
%
  disp('Problem 2a')
  A=[10.2 0 -1.1;0.1 12 0;0.1 0.2 -9.3];
  b=[1;2;3];
  xref=A\b
  x=ones(3,1);
  for k=1:10
    for i=1:3
      x(i)=(b(i)-A(i,:)*x+A(i,i)*x(i))/A(i,i);
    end
    check=norm(xref-x)/norm(xref)
  end
  disp('Problem 2b')
  myconv=norm(tril(A)\triu(A,1)) % should be less than one for convergence
%
  disp('Problem 3a')
  A=[210.5665 215.9568 375.3999;
     309.2944 317.1409 550.7982;
     227.6848 232.4327 403.2554];
  b=[-0.4816;-0.7068;-0.5182];
  xref=A\b;
  disp('Problem 3b')
  kmax=0;
  for n=1:1000
    db=0.02*rand(3,1)-0.01;
    dx=A\(b+db)-xref;
    k=norm(dx)*norm(b)/norm(xref)/norm(db);
    if k>kmax
      kmax=k;
    end
  end
  kmax
  disp('Problem 3c')
  condA=cond(A)  % compares well to kmax

  disp('Problem 4a')
  x=[1;2;4];
  f=[2.5;4.5;9];
  A=[x.^0 x x.^2];
  c=A\f
  disp('Problem 4b')
  f100=c(1)+c(2)*100+c(3)*100^2     % total water in deciliters
  f100_per_portion=f100/100         % not realistic
  disp('Problem 4c')
  f0=c(1)  % water to 0 servings

  function x=mysolve2(A,b)
% *** less efficient implementation ***
  n=length(b);
  [L,U]=LUfact2(A,n);
  y=forwsubst(L,b,n);
  x=backsubst(U,y,n);
  
  function x=mysolve1(A,b)
% *** more memory efficient implementation ***
  n=length(b);
  LU=LUfact1(A,n);
  y=forwsubst(LU,b,n);
  x=backsubst(LU,y,n);

  function x=mysolvePiv(A,b)
% *** "professional grade" solver with partial pivoting
  n=length(b);
  [LU,ind]=LUfactPiv(A,n);
  y=forwsubst(LU,b(ind),n);
  x=backsubst(LU,y,n);

  function y=forwsubst(L,y,n)
  for k=2:n
    y(k)=y(k)-L(k,1:k-1)*y(1:k-1);
  end
  
  function y=backsubst(U,y,n)
  y(n)=y(n)/U(n,n);
  for k=n-1:-1:1
    y(k)=(y(k)-U(k,k+1:n)*y(k+1:n))/U(k,k);
  end

  function [L,U]=LUfact2(A,n)  
% *** uses two explicit for-loops and two matrices for storage ***
  U=A;      % U starts as n x n system matrix A
  L=eye(n); % L starts as n x n identity matrix
% *** columns k ***
  for k=1:n-1
% *** rows j ***
    for j=k+1:n
%     * compute and store multiplicator L(j,k)
      L(j,k)=U(j,k)/U(k,k);              
%     * subtract L(j,k) times entries k:n on row k in U from
%     * entries k:n on row j in U. This clears column k of U
%     * below the diagonal
      U(j,k:n)=U(j,k:n)-L(j,k)*U(k,k:n);  
    end
  end
  
  function LU=LUfact1(LU,n)
% *** uses one explicit for-loop and one matrix for storage ***
  for k=1:n-1
    LU(k+1:n,k)=LU(k+1:n,k)/LU(k,k);
    LU(k+1:n,k+1:n)=LU(k+1:n,k+1:n)-LU(k+1:n,k)*LU(k,k+1:n);   
  end

  function [LU,ind]=LUfactPiv(LU,n)
  ind=[1:n]';
  for k=1:n-1
    [~,inx]=max(abs(LU(k:n,k)));
    inx=inx+k-1;
    ind([k inx])=ind([inx k]);
    LU([k inx],:)=LU([inx k],:);
    LU(k+1:n,k)=LU(k+1:n,k)/LU(k,k);
    LU(k+1:n,k+1:n)=LU(k+1:n,k+1:n)-LU(k+1:n,k)*LU(k,k+1:n);   
  end
  